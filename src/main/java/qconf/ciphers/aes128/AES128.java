package qconf.ciphers.aes128;

import java.util.List;

/**
 * The AES128 class serves as a base for AES-128 modes of operation. It provides all basic encryption
 * and decryption functionality.
 * <p>
 * For details about AES, see "The design of Rijndael" by Daemen and Rijmen.
 *
 * @author Gabriel Skoglund
 */
public abstract class AES128 {

    /** AES128 block size (in bytes). */
    static final short BLOCK_SZ = 16;

    /** Rows of the AES128 matrix. */
    static final short NUM_ROWS = 4;

    /** Columns of the AES128 matrix. */
    static final short NUM_COLS = 4;

    /** Number of rounds for AES128. */
    static final short NUM_ROUNDS = 10;

    // NOTE: Since Java consider the byte type as signed, we cannot declare literals with value above 0x7f.
    // For this reason, we store the s-box values as shorts and cast to bytes as necessary.
    static final short[] SBOX = {
        0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16,
    };

    static final short[] INV_SBOX = {
        0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
        0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
        0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
        0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
        0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
        0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
        0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
        0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
        0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
        0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
        0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
        0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
        0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
        0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
        0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
        0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d
    };

    private final List<Key> expandedKey;

    AES128(Key key) {
        expandedKey = key.expand();
    }

    void encrypt(State state) {
        state.addRoundKey(expandedKey.get(0));
        for (int i = 1; i < NUM_ROUNDS; i++)
            state.round(expandedKey.get(i), false);
        state.round(expandedKey.get(NUM_ROUNDS), true);
    }

    void decrypt(State state) {
        state.invRound(expandedKey.get(expandedKey.size() - 1), true);
        for (int i = expandedKey.size() - 2; i > 0; i--)
            state.invRound(expandedKey.get(i), false);
        state.addRoundKey(expandedKey.get(0));
    }

    /**
     * @param input the input to the cipher.
     * @throws AES128BlockMode.InvalidInputLengthException if the length is not a multiple of the block size of 16 bytes.
     */
    static void checkInputLength(byte[] input) throws AES128BlockMode.InvalidInputLengthException {
        if (input.length % BLOCK_SZ != 0)
            throw new AES128BlockMode.InvalidInputLengthException(input.length);
    }


    /** Class representing a 16 byte AES state */
    static class State {
        private static final byte[][] MIX_COLUMN_MATRIX = {
            {2, 3, 1, 1},
            {1, 2, 3, 1},
            {1, 1, 2, 3},
            {3, 1, 1, 2},
        };

        private static final byte[][] INV_MIX_COLUMN_MATRIX = {
            {0xe, 0xb, 0xd, 0x9},
            {0x9, 0xe, 0xb, 0xd},
            {0xd, 0x9, 0xe, 0xb},
            {0xb, 0xd, 0x9, 0xe},
        };

        byte[] state;

        public State(byte[] state) {
            this.state = state;
        }

        /** Transpose this state (seen as a 4 x 4 matrix), taking rows to columns and vice versa. */
        private void transpose() {
            byte[] newState = new byte[BLOCK_SZ];
            for (int i = 0; i < 4 * (BLOCK_SZ - 1); i += 4)
                newState[i / 4] = state[i % (BLOCK_SZ - 1)];
            newState[BLOCK_SZ - 1] = state[BLOCK_SZ - 1];
            state = newState;
        }

        /** Perform the AES round */
        private void round(Key key, boolean finalRound) {
            subBytes(SBOX);
            transpose();
            shiftRows(false);
            if (!finalRound)
                mixColumns(MIX_COLUMN_MATRIX);
            transpose();
            addRoundKey(key);
        }

        /** Perform the inverse of an AES round */
        private void invRound(Key key, boolean finalRound) {
            addRoundKey(key);
            transpose();
            if (!finalRound)
                mixColumns(INV_MIX_COLUMN_MATRIX);
            shiftRows(true);
            transpose();
            subBytes(INV_SBOX);
        }

        /** Perform the AES SubBytes operation, or the inverse, depending on the S-Box provided */
        private void subBytes(short[] sbox) {
            for (int row = 0; row < NUM_ROWS; row++) {
                for (int col = 0; col < NUM_COLS; col++) {
                    int idx = NUM_COLS * row + col;
                    state[idx] = (byte) sbox[state[idx] & 0xff];
                }
            }
        }

        /** Perform the AES (Inverse)ShiftRows operation. */
        private void shiftRows(boolean inverse) {
            for (int row = 1; row < NUM_ROWS; row++) {
                int rowStart = row * NUM_COLS;
                byte[] rowElems = {state[rowStart], state[rowStart + 1], state[rowStart + 2], state[rowStart + 3]};
                for (int col = 0; col < NUM_COLS; col++) {
                    int shift = inverse ? (col - row + NUM_COLS) : (col + row);
                    state[rowStart + col] = rowElems[shift % NUM_COLS];
                }
            }
        }

        /**
         * Perform the AES MixColumns step. Note that this also handles the inverse operation
         * based on the matrix given.
         */
        private void mixColumns(byte[][] matrix) {
            byte[] newState = new byte[BLOCK_SZ];
            for (int col = 0; col < NUM_COLS; col++) {
                for (int row = 0; row < NUM_ROWS; row++ ) {
                   byte newValue = 0;
                   for (int i = 0; i < NUM_COLS; i++)
                       newValue ^= galoisMultiply(matrix[row][i], state[i * NUM_COLS + col]);
                   newState[row * NUM_COLS + col] = newValue;
                }
            }
            state = newState;
        }

        /**
         * Multiply two bytes in GF(2^8).
         * For details, see <a href="https://en.wikipedia.org/wiki/Finite_field_arithmetic">Wikipedia</a>
         * NOTE: A more reasonable implementation would probably just use a lookup table for this.
         */
        private byte galoisMultiply(byte a, byte b) {
            byte result = 0;
            for (int i = 0; i < Byte.SIZE; i++) {
                // Multiplying with the constant term of a as a polynomial
                if ((a & 1) == 1)
                    result ^= b;
                // We want to multiply b with x. However, if b has a term x^7 we need to
                // also reduce it by the primitive polynomial x^8 + x^4 + x^3 + x + 1.
                // Note that the -1 is due to the fact that Java always consider bytes to be signed.
                if ((b >> 7) == -1)
                    b = (byte) ((b << 1) ^ 0x11b);
                else
                    b <<= 1;
                a >>= 1;
            }
            return result;
        }

        /** xor a round key into the state **/
        private void addRoundKey(Key k) {
            for (int i = 0; i < BLOCK_SZ; i++)
                state[i] ^= k.key[i];
        }

        @Override
        public String toString() {
            StringBuilder sb = new StringBuilder();
            for (int i = 0; i < BLOCK_SZ; i++) {
                sb.append(String.format("0x%x ", state[i]));
                if ((i + 1) % NUM_COLS == 0)
                    sb.append("\n");
            }
            return sb.append("\n").toString();
        }
    }
}
